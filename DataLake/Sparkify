import configparser
from datetime import datetime
import os
from pyspark.sql import SparkSession
from pyspark.sql.functions import udf, col
from pyspark.sql.functions import year, month, dayofmonth, hour, weekofyear, date_format

config = configparser.ConfigParser()
config.read('dl.cfg')

os.environ['AWS_ACCESS_KEY_ID']=config.get('default','AWS_ACCESS_KEY_ID')
os.environ['AWS_SECRET_ACCESS_KEY']=config.get('default','AWS_SECRET_ACCESS_KEY')

#spark context kyun nahin use kiya?

def create_spark_session():
    spark = SparkSession \
        .builder \
        .appName("DataLakeProject") \
        .config("spark.jars.packages", "org.apache.hadoop:hadoop-aws:2.7.0") \
        .getOrCreate()
    spark.conf.set('mapreduce.fileoutputcommiter.algorithm.version', '2')
    return spark


def process_song_data(spark, input_data, output_data):
    # get filepath to song data file
    song_data = os.path.join(input_data+'song_data/*.json')
    
    # read song data file
    df = spark.read.json(song_data)
    
    #Create a temporary view from the dataframe to extract data
    df.createOrReplaceTempView('songs')

    # extract columns to create songs table
    songs_table = spark.sql ('''
                             SELECT song_id,
                                    title,
                                    artist_id,
                                    year,
                                    duration
                             FROM   songs
                             ''')
    
    # write songs table to parquet files partitioned by year and artist
    songs_table.write.partitionBy('year','artist_name').mode('overwrite').parquet(output_data+'songs/songs_table.parquet')
    
    print('*****Completed writing songs table******')
    
    # extract columns to create artists table
    artists_table = spark.sql ('''
                               SELECT artist_id, 
                                      artist_name,
                                      artist_location, 
                                      artist_latitude, 
                                      artist_longitude 
                                FROM  songs      
                                ''')
    
    # write artists table to parquet files
    artists_table.write.mode('overwrite').parquet(output_data+'artists/artists_table.parquet')
    print('*****Completed writing artist table******') 

'''def process_log_data(spark, input_data, output_data):
    # get filepath to log data file
    log_data =

    # read log data file
    df = 
    
    # filter by actions for song plays
    df = 

    # extract columns for users table    
    artists_table = 
    
    # write users table to parquet files
    artists_table

    # create timestamp column from original timestamp column
    get_timestamp = udf()
    df = 
    
    # create datetime column from original timestamp column
    get_datetime = udf()
    df = 
    
    # extract columns to create time table
    time_table = 
    
    # write time table to parquet files partitioned by year and month
    time_table

    # read in song data to use for songplays table
    song_df = 

    # extract columns from joined song and log datasets to create songplays table 
    songplays_table = 

    # write songplays table to parquet files partitioned by year and month
    songplays_table
'''

def main():
    spark = create_spark_session()
    input_data = 's3://udacity-dend/'
    output_data = 's3a://s3-bucket-abhay/'
    
    process_song_data(spark, input_data, output_data)    
    #process_log_data(spark, input_data, output_data)


if __name__ == "__main__":
    main()
